/*
 * Lexer for Tetra.  The DEDENT generation is a real hack right now.
 * 
 * Current state of DEDENTS:
 *      Mixed tabs and spaces are allowed at the moment.  HOWEVER! Tabs and
 *      spaces are treated as equivalent, so one should not mix them in the
 *      same file.  This should be fixed in the future.
 *
 *      Furthermore, no more than 50 levels of indentation are allowed.
 *      This is easily changed by modifying MAX_INDENTS below.
 */

%{
#include <stdio.h>
#include <stdlib.h>

#define MAX_INDENTS 50
int dedent_level;
int indent_level[MAX_INDENTS];
int *num_ind = indent_level;

void error_exit(const char *str);
%}

%option warn nounput yylineno
%x indents dedents strings
%%
    /* skip blank lines */
<INITIAL,indents>^[[:blank:]]*\n     { yylineno++; } 
<strings>{  /* TODO: make strings more robust */
    (\\\"|[^"\n])+      /* escaped or not-a-quote-or-endline, do nothing */
    \n  { 
        fprintf(stderr, "Line %d: non-terminated string.\n", yylineno);
        exit (1);
    }
    \" {
        BEGIN(INITIAL);
    }
}
<indents>^[^[:space:]] { /* 0 whitespace to begin line */
    BEGIN(INITIAL);
    yyless(0);
    dedents = 0;
    for (; *num_ind != 0; num_ind--) {
        dedents++;
    }
    return TOK_DEDENT;
}
<indents>^[[:blank:]]* {   
    BEGIN(INITIAL);
    /* no indentation change */
    if (yyleng == *num_ind) {
        return TOK_NULL; 
    }
    /* indentation increased */
    if (yyleng > *num_ind) { 
        num_ind++;
        if ((num_ind - indent_level) >= MAX_INDENTS) {
            fprintf(stderr, "Too many levels of indentation.\n");
            fprintf(stderr, "Exiting lexical analysis.\n");
            exit(1);
        }
        *num_ind = yyleng;
        return TOK_INDENT;
    }
    /* indentation decreased */ 
    dedents = 0;
    for (; *num_ind != yyleng; num_ind--) {
        dedents++;
        if (*num_ind == 0) {
            error_exit("Dedented to non-matching column.");
        }
    }
    return TOK_DEDENT;
}

<dedents>^[[:blank:]]* {
    if (yyleng == *num_ind) {
        BEGIN(INITIAL);
    } else if (yyleng < *num_ind) {
        yyless(*num_ind - yyleng);
        --num_ind;
    } else {/* yyleng > *num_ind */ 
        error_exit("Dedented to non-matching column.");
    }
    return TOK_DEDENT;
}

\n  {
    BEGIN(indents);
    return TOK_NEWLINE;
}
\" {
    BEGIN(strings);
    return TOK_STRING;
}
[[:blank:]]+                        /* skip spaces & tabs */
#.*$                                { yylineno++; }
"true"                              |
"false"                             { return TOK_BOOL; }
[[:digit:]]+                        |
0[Bb][01]+                          |
0[Xx][[:xdigit:]]+	                { return TOK_INT; }
[[:digit:]]+f                       |
[[:digit:]]+"."[[:digit:]]*         |
"."[[:digit:]]+	                    { return TOK_REAL; }
"if"                                { return TOK_IF; }
"else"	                            { return TOK_ELSE; }
"for"                               { return TOK_FOR; }
"forall"                            { return TOK_FORALL; }
"while"	                            { return TOK_WHILE; }
"def"	                            { return TOK_DEF; }
"<"	                                { return TOK_LT; }
">"	                                { return TOK_GT; }
"<="	                            { return TOK_LTE; }
">="	                            { return TOK_GTE; }
"=="	                            { return TOK_EQ; }
"!="	                            { return TOK_NEQ; }
"+"	                                { return TOK_PLUS; }
"-"	                                { return TOK_MINUS; }
"/"	                                { return TOK_DIV; }
"*"	                                { return TOK_MULT; }
"**"	                            { return TOK_EXP; }
"/="	                            { return TOK_DIVEQ; }
"*="	                            { return TOK_MULTEQ; }
"+="	                            { return TOK_PLUSEQ; }
"-="	                            { return TOK_MINUSEQ; }
"&&"	                            { return TOK_AND; }
"||"	                            { return TOK_OR; }
":"                                 { return TOK_COLON; }
"="                                 { return TOK_BECOMES; }
"("                                 { return TOK_LEFTPAR; }
")"                                 { return TOK_RIGHTPAR; }
[[:alpha:]_][[:alnum:]_]*	        { return TOK_IDENTIFIER; }

%%

void error_exit(const char *str)
{
    fprintf("Line %d: %s\n", yylineno, str);
    exit(1);
}
